==================
Security in Django
==================

This document is an overview of Django's security features. It includes advice
on securing a Django-powered site.

..  note::

    Django's web security implementations have been designed with security for
    real-world applications in mind. Django is a general-purpose web
    application framework, and its defaults reflect this - they will not be the
    best solution for every particular case. Special cases deserve special
    attention to their needs.

    Web security requires a multi-layered approach. Neither a single layer of
    protection, nor an apparent weakness in one, can on its own reflect on the
    overall security of a Django website. This needs to be borne in mind
    particularly when assessing individual points in security audits.

.. _cross-site-scripting:

Cross-site scripting (XSS) protection
=====================================

.. highlightlang:: html+django

In a cross-site scripting attack, malicious code in the form of a client-side
script is injected into another user's web browser, where it will be executed.

This is typically done by:

* storing the malicious script in the database where it will be retrieved and
  presented to other users in their browsers, or
* getting users to click a link which will cause the attacker's JavaScript to
  be executed by the user's browser.

Cross-site scripting attacks can originate from any untrusted source of data,
including cookies or web services, if the data are not adequately sanitized
before being published in a page.

Django templates provide protection against the majority of cross-site
scripting attacks by :ref:`automatically escaping characters that represent a
risk <automatic-html-escaping>` (that is, HTML characters that could be
*interpreted* by the browser to malicious effect are instead safely
*displayed*).

However, the extent of this protection and its limitations should be understood.

For example, consider the case below, where the template expects ``var`` to
contain something like ``'class1'``:

.. code-block:: text

    <style class={{ var }}>...</style>

.. highlighting as html+django fails due to intentionally missing quotes.

If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this could
result in unauthorized JavaScript execution, depending on how the browser
renders imperfect HTML. Better template design, in which ``{{ var }}`` is
quoted in the template itself, would fix this.

It is also important to be particularly careful when using the ``is_safe``
attribute with custom template tags, the :tfilter:`safe` template tag,
:mod:`mark_safe <django.utils.safestring>`, and when autoescape is turned off.

Django's built-in escaping is intended to protect HTML output. If you are using
the template system to output something other than HTML, the characters and
strings that require escaping might be entirely different.

You should also be very careful when storing HTML in the database, especially
when that HTML is retrieved and displayed. Unless the HTML is guaranteed to
come from a trusted source - user input is *not* a trusted source - stored HTML
should be checked and sanitized, preferably on input as well as output.

Cross-site request forgery (CSRF) protection
============================================

* :ref:`Cross-site request forgery reference <csrf-protection-reference>`
* :ref:`using-csrf`

Cross-site request forgery attacks allow a malicious user to execute actions
using the credentials of another user without that user's knowledge or consent.

Django has built-in protection against most types of CSRF attacks, providing you
have :ref:`enabled and used it <using-csrf>` where appropriate. However, as with
any mitigation technique, there are limitations. For example, it is possible to
disable the CSRF module globally or for particular views. You should only do
this if you know what you are doing. There are other :ref:`limitations
<csrf-subdomains>` if your site has subdomains that are outside of your
control.

CSRF protection checks for a secret in each POST request. This ensures that a
malicious user cannot simply "replay" a form POST to your website and have
another logged in user unwittingly submit that form. The malicious user would
have to know the secret, which is user-specific (using a cookie). See :ref:`How
it works <how-csrf-works>` below for a fuller explanation.

When deployed with :ref:`HTTPS <security-recommendation-ssl>`,
``CsrfViewMiddleware`` will check that the HTTP referer header is set to a
URL on the same origin (including subdomain and port). Because HTTPS
provides additional security, it is imperative to ensure connections use HTTPS
where it is available by forwarding insecure connection requests and using
HSTS for supported browsers.

Be very careful with marking views with the ``csrf_exempt`` decorator unless
it is absolutely necessary.

.. _how-csrf-works:

How it works
------------

Django's CSRF protection places a hidden field on its forms, that will be
submitted when the form is POSTed. At the same time, it sets a CSRF cookie with
a matching value.

When Django receives the form, along with the cookie, if the cookie and the
hidden field don't match, the POST request will be rejected.

This helps distinguish between legitimate (in which the user really did intend
to submit such a form) and forged (in which a script or other mechanism is used
to submit a malicious form using the victim's identity) requests.

The technical details of this protection:

* Django creates a random secret value, which only the server will have access
  to.

* A CSRF cookie based on this value is set by ``CsrfViewMiddleware``. It is
  sent with every response that has called
  ``django.middleware.csrf.get_token()`` (the function used internally to
  retrieve the CSRF token), if it wasn't already set on the request.

  In order to protect against `BREACH`_ attacks, the cookie doesn't simply
  contain the secret value; a random salt is prepended to the value and used to
  scramble it.

  For security reasons, the secret value is changed each time a user logs in.

* A hidden form field named 'csrfmiddlewaretoken' is present in all outgoing
  POST forms. The value of this field is, again, the value of the secret, with
  a salt which is both added to it and used to scramble it. The salt is
  regenerated on every call to ``get_token()`` so that the form field value is
  changed in every such response.

  This is handled by the :ttag:`csrf_token` template tag.

* For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or
  TRACE, a CSRF cookie must be present, and the 'csrfmiddlewaretoken' field
  must be present and correct. If it isn't, the user will get a 403 error.

  When validating the 'csrfmiddlewaretoken' field value, only the secret, not
  the full token, is compared with the secret in the cookie value. This allows
  the use of ever-changing tokens, based on the same secret. While each request
  may use its own token, the secret remains common to all.

  This check is done by ``CsrfViewMiddleware``.

* In addition, for HTTPS requests, strict referer checking is done by
  ``CsrfViewMiddleware``. This means that even if a subdomain can set or modify
  cookies on your domain, it can't force a user to post to your application
  since that request won't come from your own exact domain.

  This also addresses a man-in-the-middle attack that's possible under HTTPS
  when using a session independent secret, due to the fact that HTTP
  ``Set-Cookie`` headers are (unfortunately) accepted by clients even when
  they are talking to a site under HTTPS. (Referer checking is not done for
  HTTP requests because the presence of the ``Referer`` header isn't reliable
  enough under HTTP.)

  If the :setting:`CSRF_COOKIE_DOMAIN` setting is set, the referer is compared
  against it. This setting supports subdomains. For example,
  ``CSRF_COOKIE_DOMAIN = '.example.com'`` will allow POST requests from
  ``www.example.com`` and ``api.example.com``. If the setting is not set, then
  the referer must match the HTTP ``Host`` header.

  Expanding the accepted referers beyond the current host or cookie domain can
  be done with the :setting:`CSRF_TRUSTED_ORIGINS` setting.

This ensures that only forms that have originated from trusted domains can be
used to POST data back.

It deliberately ignores GET requests (and other requests that are defined as
'safe' by :rfc:`7231`). These requests ought never to have any potentially
dangerous side effects , and so a CSRF attack with a GET request ought to be
harmless. :rfc:`7231` defines POST, PUT, and DELETE as 'unsafe', and all other
methods are also assumed to be unsafe, for maximum protection.

The CSRF protection cannot protect against man-in-the-middle attacks, so use
:ref:`HTTPS <security-recommendation-ssl>` with
:ref:`http-strict-transport-security`. It also assumes :ref:`validation of
the HOST header <host-headers-virtual-hosting>` and that there aren't any
:ref:`cross-site scripting vulnerabilities <cross-site-scripting>` on your site
(because XSS vulnerabilities already let an attacker do anything a CSRF
vulnerability allows and much worse).

.. admonition:: Removing the ``Referer`` header

    To avoid disclosing the referrer URL to third-party sites, you might want
    to `disable the referer`_ on your site's ``<a>`` tags. For example, you
    might use the ``<meta name="referrer" content="no-referrer">`` tag or
    include the ``Referrer-Policy: no-referrer`` header. Due to the CSRF
    protection's strict referer checking on HTTPS requests, those techniques
    cause a CSRF failure on requests with 'unsafe' methods. Instead, use
    alternatives like ``<a rel="noreferrer" ...>"`` for links to third-party
    sites.

.. _BREACH: http://breachattack.com/
.. _disable the referer: https://www.w3.org/TR/referrer-policy/#referrer-policy-delivery

.. _csrf-subdomains:

CSRF and subdomains
-------------------

Subdomains within a site will be able to set cookies on the client for the whole
domain. By setting the cookie and using a corresponding token, subdomains will
be able to circumvent the CSRF protection. The only way to avoid this is to
ensure that subdomains are controlled by trusted users (or, are at least unable
to set cookies).

Note that even without CSRF, there are other vulnerabilities, such as session
fixation, that make giving subdomains to untrusted parties a bad idea, and
these vulnerabilities cannot easily be fixed with current browsers.

CSRF protection design policy
-----------------------------

CSRF token pairs (cookie and POST data) are:

* arbitrary
* not linked to sessions by default.

Arbitrary CSRF token pairs
~~~~~~~~~~~~~~~~~~~~~~~~~~

This will occasionally be flagged in security audits as a vulnerability. That
is, when Django checks the cookie against the POSTed hidden field, it only
checks that they match *each other*, not that they match the server secret on
which they are both based, or that they can be verified against the user's
session.

This means an attacker could assemble a POST request on a victim's machine,
containing a matching cookie-field pair, that would pass the CSRF checks.

It's possible to stage a 'proof' of such an attack by manipulating one's own
cookies and constructing malicious POST requests that defeat CSRF protection.
This would be akin to complaining of a weakness in one's own front-door by
demonstrating that it can be opened by someone inside the house - in each case,
an attack of this kind is predicated on a high level of access already.

In a real CSRF attack, the attacker would need access to the victim's cookies
to be able to achieve this, via (for example) a man-in-the-middle or cross-site
scripting attack, in which case the victim has already been thoroughly
compromised, and exploiting CSRF is almost certainly an unnecessary extra
effort.

CSRF tokens not associated with sessions by default
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

CSRF tokens *can* be linked to sessions by using the
:setting:`CSRF_USE_SESSIONS`, which stores them in the user's session cookie.
(note that this would provide no additional protection against the
CSRF-defeating attacks described above).

However this is not the default, because *not* linking CSRF protection to a
session allows using the protection on sites (for example, pastebins such as
`dpaste.com <http://dpaste.com>`_ that allow submissions from anonymous users
who don't have a session.

Rationale for Django's CSRF protection design decisions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Django's CSRF protection is realistic; it doesn't attempt to defend against
  vulnerabilities that are premised upon much more serious compromises.
* Django's defaults are stateless (that is, they don't depend on server state).
  This allows it to scale well, for example in deployments based on multiple
  application server instances.
* Deployments at scale will often use backends that don't require synchronized
  locking access to server side data.
* Not tying CSRF protection to sessions allows developers to use different
  session backends, without the risk of relying on a backend that may not
  have implemented CSRF protection correctly.
* Django's technique supports forms in multiple browser tabs, and not just for
  the last form loaded.
* Django doesn't oblige the site to create anonymous sessions to support forms,
  helping eliminate a Denial of Service vulnerability (creating many anonymous
  sessions to cause session exhaustion on the server by opening lots of forms
  is a common attack).
* Django's technique allows the user to return to a half-completed form and
  submit it even after a long gap. If the form were tied to a session that had
  expired, the user could lose their data. More generally, the site owner would
  be forced to choose between good practice (short anonymous session times) and
  good user experience.

Token rotation after login
--------------------------

For security reasons, CSRF tokens are rotated each time a user logs in. Any
page with a form generated before a login will have an old, invalid CSRF token
and need to be reloaded. This might happen if a user uses the back button after
a login or if they log in in a different browser tab.

.. _sql-injection-protection:

SQL injection protection
========================

SQL injection is a type of attack where a malicious user is able to execute
arbitrary SQL code on a database. This can result in records
being deleted or data leakage.

By using Django's querysets, the resulting SQL will be properly escaped by
the underlying database driver. However, Django also gives developers power to
write :ref:`raw queries <executing-raw-queries>` or execute
:ref:`custom sql <executing-custom-sql>`. These capabilities should be used
sparingly and you should always be careful to properly escape any parameters
that the user can control. In addition, you should exercise caution when using
:meth:`~django.db.models.query.QuerySet.extra` and
:class:`~django.db.models.expressions.RawSQL`.

Clickjacking protection
=======================

Clickjacking is a type of attack where a malicious site wraps another site
in a frame. This attack can result in an unsuspecting user being tricked
into performing unintended actions on the target site.

Django contains :ref:`clickjacking protection <clickjacking-prevention>` in
the form of the
:mod:`X-Frame-Options middleware <django.middleware.clickjacking.XFrameOptionsMiddleware>`
which in a supporting browser can prevent a site from being rendered inside
a frame. It is possible to disable the protection on a per view basis
or to configure the exact header value sent.

The middleware is strongly recommended for any site that does not need to have
its pages wrapped in a frame by third party sites, or only needs to allow that
for a small section of the site.

.. _security-recommendation-ssl:

SSL/HTTPS
=========

It is always better for security to deploy your site behind HTTPS. Without
this, it is possible for malicious network users to sniff authentication
credentials or any other information transferred between client and server, and
in some cases -- **active** network attackers -- to alter data that is sent in
either direction.

If you want the protection that HTTPS provides, and have enabled it on your
server, there are some additional steps you may need:

* If necessary, set :setting:`SECURE_PROXY_SSL_HEADER`, ensuring that you have
  understood the warnings there thoroughly. Failure to do this can result
  in CSRF vulnerabilities, and failure to do it correctly can also be
  dangerous!

* Set :setting:`SECURE_SSL_REDIRECT` to ``True``, so that requests over HTTP
  are redirected to HTTPS.

  Please note the caveats under :setting:`SECURE_PROXY_SSL_HEADER`. For the
  case of a reverse proxy, it may be easier or more secure to configure the
  main Web server to do the redirect to HTTPS.

* Use 'secure' cookies.

  If a browser connects initially via HTTP, which is the default for most
  browsers, it is possible for existing cookies to be leaked. For this reason,
  you should set your :setting:`SESSION_COOKIE_SECURE` and
  :setting:`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser
  to only send these cookies over HTTPS connections. Note that this will mean
  that sessions will not work over HTTP, and the CSRF protection will prevent
  any POST data being accepted over HTTP (which will be fine if you are
  redirecting all HTTP traffic to HTTPS).

* Use :ref:`http-strict-transport-security` (HSTS)

  HSTS is an HTTP header that informs a browser that all future connections
  to a particular site should always use HTTPS. Combined with redirecting
  requests over HTTP to HTTPS, this will ensure that connections always enjoy
  the added security of SSL provided one successful connection has occurred.
  HSTS may either be configured with :setting:`SECURE_HSTS_SECONDS`,
  :setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS`, and :setting:`SECURE_HSTS_PRELOAD`,
  or on the Web server.

.. _host-headers-virtual-hosting:

Host header validation
======================

Django uses the ``Host`` header provided by the client to construct URLs in
certain cases. While these values are sanitized to prevent cross-site scripting
attacks, a fake ``Host`` value can be used for cross-site request forgery,
cache poisoning attacks, and poisoning links in emails.

Because even seemingly-secure web server configurations are susceptible to fake
``Host`` headers, Django validates ``Host`` headers against the
:setting:`ALLOWED_HOSTS` setting in the
:meth:`django.http.HttpRequest.get_host()` method.

This validation only applies via :meth:`~django.http.HttpRequest.get_host()`;
if your code accesses the ``Host`` header directly from ``request.META`` you
are bypassing this security protection.

For more details see the full :setting:`ALLOWED_HOSTS` documentation.

.. warning::

   Previous versions of this document recommended configuring your web server to
   ensure it validates incoming HTTP ``Host`` headers. While this is still
   recommended, in many common web servers a configuration that seems to
   validate the ``Host`` header may not in fact do so. For instance, even if
   Apache is configured such that your Django site is served from a non-default
   virtual host with the ``ServerName`` set, it is still possible for an HTTP
   request to match this virtual host and supply a fake ``Host`` header. Thus,
   Django now requires that you set :setting:`ALLOWED_HOSTS` explicitly rather
   than relying on web server configuration.

Additionally, Django requires you to explicitly enable support for the
``X-Forwarded-Host`` header (via the :setting:`USE_X_FORWARDED_HOST` setting)
if your configuration requires it.

Session security
================

Similar to the :ref:`CSRF limitations <csrf-subdomains>` requiring a site to
be deployed such that untrusted users don't have access to any subdomains,
:mod:`django.contrib.sessions` also has limitations. See :ref:`the session
topic guide section on security <topics-session-security>` for details.

.. _user-uploaded-content-security:

User-uploaded content
=====================

.. note::
    Consider :ref:`serving static files from a cloud service or CDN
    <staticfiles-from-cdn>` to avoid some of these issues.

* If your site accepts file uploads, it is strongly advised that you limit
  these uploads in your Web server configuration to a reasonable
  size in order to prevent denial of service (DOS) attacks. In Apache, this
  can be easily set using the LimitRequestBody_ directive.

* If you are serving your own static files, be sure that handlers like Apache's
  ``mod_php``, which would execute static files as code, are disabled. You don't
  want users to be able to execute arbitrary code by uploading and requesting a
  specially crafted file.

* Django's media upload handling poses some vulnerabilities when that media is
  served in ways that do not follow security best practices. Specifically, an
  HTML file can be uploaded as an image if that file contains a valid PNG
  header followed by malicious HTML. This file will pass verification of the
  library that Django uses for :class:`~django.db.models.ImageField` image
  processing (Pillow). When this file is subsequently displayed to a
  user, it may be displayed as HTML depending on the type and configuration of
  your web server.

  No bulletproof technical solution exists at the framework level to safely
  validate all user uploaded file content, however, there are some other steps
  you can take to mitigate these attacks:

  1. One class of attacks can be prevented by always serving user uploaded
     content from a distinct top-level or second-level domain. This prevents
     any exploit blocked by `same-origin policy`_ protections such as cross
     site scripting. For example, if your site runs on ``example.com``, you
     would want to serve uploaded content (the :setting:`MEDIA_URL` setting)
     from something like ``usercontent-example.com``. It's *not* sufficient to
     serve content from a subdomain like ``usercontent.example.com``.

  2. Beyond this, applications may choose to define a whitelist of allowable
     file extensions for user uploaded files and configure the web server
     to only serve such files.

.. _same-origin policy: https://en.wikipedia.org/wiki/Same-origin_policy

.. _additional-security-topics:

Additional security topics
==========================

While Django provides good security protection out of the box, it is still
important to properly deploy your application and take advantage of the
security protection of the Web server, operating system and other components.

* Make sure that your Python code is outside of the Web server's root. This
  will ensure that your Python code is not accidentally served as plain text
  (or accidentally executed).
* Take care with any :ref:`user uploaded files <file-upload-security>`.
* Django does not throttle requests to authenticate users. To protect against
  brute-force attacks against the authentication system, you may consider
  deploying a Django plugin or Web server module to throttle these requests.
* Keep your :setting:`SECRET_KEY` a secret.
* It is a good idea to limit the accessibility of your caching system and
  database using a firewall.
* Take a look at the Open Web Application Security Project (OWASP) `Top 10
  list`_ which identifies some common vulnerabilities in web applications. While
  Django has tools to address some of the issues, other issues must be
  accounted for in the design of your project.

.. _LimitRequestBody: https://httpd.apache.org/docs/2.4/mod/core.html#limitrequestbody
.. _Top 10 list: https://www.owasp.org/index.php/Top_10_2013-Top_10

